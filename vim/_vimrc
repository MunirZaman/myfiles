syntax on
set re=1

" completor "
filetype plugin on
filetype indent on
set omnifunc=syntaxcomplete#Complete

set encoding=utf-8
set splitbelow
set relativenumber
set spl=en spell
set ruler
set smartindent
set cursorline
set cursorcolumn
set t_Co=256
set splitright
set termwinsize=5x0

" SHOW AUTOCOMPLETE
inoremap <C-Space> <C-x><C-k>
" FONT

set guifont=FiraCode_NF:h11
"set guifont=Fira\ Code:h11
"set guifont=Hack_NF:h11
"set guifont=*
set encoding=utf-8
set renderoptions=type:directx

set bs=2
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set guioptions-=T
set guioptions-=m


call plug#begin("~/vimfiles/plugged")

Plug 'lervag/vimtex', {'for' : 'tex'}
let g:tex_flavor='latex'
let g:vimtex_quickfix_mode=0

Plug 'sirver/ultisnips'
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

Plug 'maralla/completor.vim'
let g:completor_python_binary = 'C:/Users/Munir/AppData/Local/Programs/Python/Python39'

Plug 'preservim/nerdtree'
let NERDTreeWinSize = 40
let NERDTreeWinPos='right'

Plug '907th/vim-auto-save'
let g:auto_save=1
let g:auto_save_silent=1
let g:auto_save_events = ["InsertLeave"]

Plug 'itchyny/lightline.vim'
set laststatus=2

Plug 'morhetz/gruvbox'

Plug 'davidhalter/jedi-vim', {'for' : 'python'}

Plug 'vim-python/python-syntax', {'for' : 'python'}
let g:python_highlight_all = 1

Plug 'tpope/vim-fugitive'

Plug 'hura/vim-asymptote'

Plug 'pineapplegiant/spaceduck' 

Plug 'sheerun/vim-polyglot'

Plug 'ryanoasis/vim-devicons'

Plug 'neovimhaskell/haskell-vim', {'for' : 'haskell'}
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

call plug#end() 

let g:python_indent = '    '
let g:python_style = 'numpy'

"colorscheme spaceduck 
"colorscheme monokai
"colorscheme onedark
colorscheme gruvbox
" set back-ground color"
" highlight Normal guibg=#062439

" https://stackoverflow.com/questions/7588531/vim-set-color-theme-based-off-time-of-day
if strftime("%H") < 12
  set background=light
else
  set background=dark
endif

let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'component_function': {
      \   'filetype': 'MyFiletype',
      \   'fileformat': 'MyFileformat',
      \ }
      \ }

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

setlocal spell
set spelllang=en
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

noremap <C-s> :w<Enter>
"TDOD: CHANGE THIS TO CPP COMPILE COMAND
noremap <C-b> :w<Enter>
"noremap <C-v> "+gP
noremap <C-z> u

inoremap <C-s> <Esc>:w<Enter>:w<Enter>li
inoremap <C-b> <Esc>:wq!<Enter>li
inoremap <C-v> <Esc>"+gP<Esc>li
inoremap <C-z> <Esc>ui

inoremap <k2>  <Esc>:tabn<Enter>
inoremap <k1>  <Esc>:tabp<Enter>
inoremap <k0>  <Esc>:q!<Enter>

noremap <k2>  :tabn<Enter>
noremap <k1>  :tabp<Enter>
noremap <k0>  :q!<Enter>

nnoremap <kPlus> :NERDTreeToggle<CR>
inoremap <kPlus> <Esc>:NERDTreeToggle<CR>

inoremap <C-c> <Esc>"+y<Esc>li
inoremap <C-w> <Esc>:set wrap!<Enter>li
inoremap <k3> <Esc>:below term<Enter>

noremap <C-c> "+y
noremap <C-w> :set wrap!<Enter>
noremap <k3> :below term<Enter>

"nnoremap <k5> :below term<Enter>ipython<Enter>
"inoremap <k5> <Esc>:below term<Enter>ipython<Enter>
"Opens ipython"

vmap <Tab> >
vmap <S-Tab> <
" visual tabbing/indenting

nmap ;lc :!del *.aux *.log *.gz<Enter>
nmap ;lb :!pdflatex -interaction=batchmode -shell-escape %<Enter>
nmap ;ll :!pdflatex -shell-escape %<Enter> 
nmap ;a :!asy asymptote\\*.asy<Enter> 

let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : '',
    \ 'callback' : 1,
    \ 'continuous' : 1,
    \ 'executable' : 'latexmk',
    \ 'hooks' : [],
    \ 'options' : [
    \   '-verbose',
    \   '-shell-escape',
    \   '-file-line-error',
    \   '-synctex=1',
    \   '-interaction=nonstopmode',
    \ ],
    \}

" execute latexmk -c when exiting tex file
au BufWinLeave *.tex !latexmk -c
